#!/usr/bin/env python
# coding: utf-8

# In[1]:

#Detecting Fake News with Python
#TFIDF(Term Frequency-Inverse Document Frequency) - Scans through a document and identifies words that occur many times but also occurs several times in other documents. 
#PassiveAggressiveClassifier - They are online learning algorithms that remains passive for a correct clssification result but turns aggressive in the event of misclassification
#This project will employ the use of Sklearn in building TFIDFVectorizer on the Dataset than initialize a PassiveAggressive Classifier and fit the model

# In[2]:

#Import Libraries to be used
import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# In[3]:

#Load the Fake News Dataset
Fakenews = pd.read_csv("C:\\Users\\Efemena Ikpro\\OneDrive\\Desktop\\ML Projects\\Dataset\\news.csv")

# In[4]:

Fakenews.head()

# In[6]:

Fakenews.shape


# In[10]:

Fakenews.info()

# In[11]:

labels = Fakenews.label
labels.head()
# In[13]:

#Split Data
x_train,x_test,y_train,y_test = train_test_split(Fakenews["text"], labels, test_size = 0.2, random_state=7)

# In[14]:

#Initiate a TFidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words="english", max_df=0.7)

# In[15]:

#Fit and Transform Train Set, Transform Test Set
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

# In[16]:

#Initiate PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter = 50)
pac.fit(tfidf_train, y_train)

# In[17]:

#Predict on the test set and calcualate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f"Accuracy: {round(score*100, 2)}%")

# In[19]:

#Build Confusion Matrix
confusion_matrix(y_test, y_pred, labels=['FAKE','REAL'])
